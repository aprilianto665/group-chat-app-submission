// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  name      String
  password  String
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  memberships SpaceMember[]
  notes      Note[]

  @@map("users")
}

model Space {
  id          String    @id @default(cuid())
  name        String
  icon        String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  members     SpaceMember[]
  notes       Note[]

  @@map("spaces")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  spaceId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("messages")
}

enum Role {
  ADMIN
  MEMBER
}

model SpaceMember {
  id        String   @id @default(cuid())
  spaceId   String
  userId    String
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([spaceId, userId])
  @@map("space_members")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  spaceId   String
  authorId  String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id])
  author User? @relation(fields: [authorId], references: [id])
  blocks NoteBlock[]

  @@map("notes")
}

enum BlockType {
  TEXT
  HEADING
  TODO
}

model NoteBlock {
  id         String    @id @default(cuid())
  noteId     String
  type       BlockType
  content    String    @default("")
  todoTitle  String?
  collapsed  Boolean   @default(false)
  sortOrder  Int       @default(0)

  note Note @relation(fields: [noteId], references: [id])
  items NoteTodoItem[]

  @@index([noteId, sortOrder])
  @@map("note_blocks")
}

model NoteTodoItem {
  id          String   @id @default(cuid())
  blockId     String
  text        String
  done        Boolean  @default(false)
  description String?
  sortOrder   Int      @default(0)

  block NoteBlock @relation(fields: [blockId], references: [id])

  @@index([blockId, sortOrder])
  @@map("note_todo_items")
}
