generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum BlockType {
  TEXT
  HEADING
  TODO
}

model User {
  id         String       @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  email      String       @unique @db.Citext
  username   String       @unique @db.Citext
  name       String       @db.VarChar(80)
  password   String       @db.VarChar(72)
  avatar     String?      @db.VarChar(2048)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  messages   Message[]
  memberships SpaceMember[]
  notes      Note[]       @relation("UserNotes")

  @@map("users")
}

model Space {
  id          String       @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name        String       @db.VarChar(80)
  icon        String?      @db.VarChar(2048)
  description String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  messages    Message[]
  members     SpaceMember[]
  notes       Note[]

  @@map("spaces")
}

model Message {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  content   String   @db.Text
  spaceId   String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@index([spaceId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@map("messages")
}

model SpaceMember {
  spaceId   String   @db.Uuid
  userId    String   @db.Uuid
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([spaceId, userId])
  @@index([userId])
  @@index([spaceId])
  @@map("space_members")
}

model Note {
  id        String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  title     String   @db.VarChar(200)
  spaceId   String   @db.Uuid
  authorId  String?  @db.Uuid
  sortOrder Int      @db.SmallInt @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space  Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  author User?  @relation("UserNotes", fields: [authorId], references: [id], onDelete: SetNull)
  blocks NoteBlock[]

  @@index([spaceId, sortOrder])
  @@map("notes")
}

model NoteBlock {
  id         String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  noteId     String    @db.Uuid
  type       BlockType
  content    String    @db.Text @default("")
  todoTitle  String?   @db.VarChar(200)
  sortOrder  Int       @db.SmallInt @default(0)

  note  Note         @relation(fields: [noteId], references: [id], onDelete: Cascade)
  items NoteTodoItem[]

  @@index([noteId, sortOrder])
  @@map("note_blocks")
}

model NoteTodoItem {
  id          BigInt   @id @default(autoincrement()) @db.BigInt
  blockId     String   @db.Uuid
  text        String   @db.VarChar(500)
  done        Boolean  @default(false)
  description String?  @db.Text
  sortOrder   Int      @db.SmallInt @default(0)

  block NoteBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@index([blockId, sortOrder])
  @@map("note_todo_items")
}